name: conditional CI for bluesky-selfhost-env

on:
  push:
    paths-ignore:
    - '**.md'
    branches: [ master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
    paths-ignore:
    - '**.md'
  schedule:
   - cron: '00 20 * * *'
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  #REGISTRY: docker.io
  TZ: ${{ vars.TZ }}
  opsBranch: ${{ vars.opsBranch}}
  fork_repo_prefix: ${{ vars.fork_repo_prefix }}
  builder: ${{ vars.builder }}
  buildImage: ${{ vars.buildImage}}
  buildContainers: ${{ vars.buildContainers }}
  user: ${{ github.repository_owner }}
  gh_secret: ${{secrets.GH_TOKEN_WORKFLOW }}
  branch:    ${{ github.ref_name }}
  myURL:  ${{github.server_url}}/${{github.repository}}
  myResultPage: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}
  _nrepo: ${{vars._nrepo}}

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: adjust env   ${{env.myResultPage}}
        run : |
           echo asof=ci-$(date +'%Y%m%d-%H%M%S') >> $GITHUB_ENV
           echo topDir=${GITHUB_WORKSPACE} >> $GITHUB_ENV
           echo rDir=${GITHUB_WORKSPACE}/ops/repos >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: pull from repos ${{env.asof}}
        run: |
          env | sort --ignore-case
          git clone https://github.com/itaru2622/bluesky-selfhost-env.git ops
          (cd ops; \
              git checkout origin/${opsBranch} -b ${opsBranch} | cat; \
              make cloneAll; \
          )

      - name: git log    upstream/main from fork/main ${{env.asof}}
        run: |
          (cd ops; \
              make exec under=repos/* cmd='\
                 git log --format="%ad ;   %h ; %aL ; %s ;%d" --date=format:%Y-%m-%dT%H:%M:%S --decorate-refs=refs/tags/ --decorate=full fork/main   > /tmp/log-fork-$${r}     ; \
                 git log --format="%ad ;   %h ; %aL ; %s ;%d" --date=format:%Y-%m-%dT%H:%M:%S --decorate-refs=refs/tags/ --decorate=full origin/main > /tmp/log-upstream-$${r} ; \
                 diff -u /tmp/log-fork-$${r} /tmp/log-upstream-$${r} | grep ^+ | tail -n +2 | sed 's/^+//' | tee ${topDir}/log-commits/$${r};' ; \
          )

      - name: statistics of commit diff ${{env.asof}}
        run: |
          (cd ${topDir}/log-commits/; \
              wc -l *; \
          )

      - name: check if new tag exists in the diff of commits ${{env.asof}}
        run: |
          (cd ${topDir}/log-commits/; \
              grep \; * | sed -e 's/:/;/' | awk -F\; '{print $1" ; "$2";"$3";"$6}' | grep -v ';$' | cat; \
          )

      - name: get latest commit in upstreams  ${{env.asof}}
        run: |
          head -1 /tmp/log-upstream-* | sed 's#/tmp/log-upstream-##g' | cat

      - name: get latest commit in fork  ${{env.asof}}
        run: |
          head -1 /tmp/log-fork-* | sed 's#/tmp/log-fork-##g' | cat

      - name:  make condition vars from num of un-followed  ${{env.asof}}
        id: unfollowedCommits
        run: |
              # make conditional var of step.{id}.outputs.{name} by 'echo "{name}={value}" >> ${GITHUB_OUTPUT}'
              wc=$(wc -l ./log-commits/* | grep 'total' | awk '{print $1}')
              git=$(git status ./log-commits/ --short | wc -l )
              echo "wc=${wc}" >> ${GITHUB_OUTPUT}
              echo "git=${git}" >> ${GITHUB_OUTPUT}

      - name: print unfollowedCommits  ${{env.asof}}
        run: |
               echo "wc:  ${{ steps.unfollowedCommits.outputs.wc }}"
               echo "git: ${{ steps.unfollowedCommits.outputs.git }}"

      - name: update env.buildImage by unfollowedCommits as test.
        if: steps.unfollowedCommits.outputs.wc > 0 && steps.unfollowedCommits.outputs.git > 0
        run: |
              echo "buildImage=true" >> $GITHUB_ENV

      - name: revert env.buildImage by vars
        run: |
              echo "before overwrite   buildImage=${buildImage}"
              echo "buildImage=${{vars.buildImage}}" >> $GITHUB_ENV

      - name: patch apply ${{env.asof}}
        run: |
          (cd ops; \
              make exec under=${rDir}/* cmd='git config --local user.email "github-actions[bot]@users.noreply.github.com"; git config --local user.name  "github-actions[bot]" '; \
              make exec under=${rDir}/* cmd='git checkout -b work'; \
              make patch-dockerbuild; \
          )
          echo "########### find .rej ################"
          find ${rDir} -type f | grep -v /.git | grep .rej$ | cat
          code=`find ${rDir} -type f | grep -v /.git | grep .rej$ | cat | wc -l`
          echo $code
          # code==0 => ok otherwise failure
          exit $code

      - name: cleanup docker env to avoid no disk space ${{env.asof}}, in conditional
        if: ${{env.buildImage == 'true' }}
        run: |
           docker system df
           docker system df -v
           docker system prune -a --volumes -f
           docker system df
           docker system df -v

      - name: build docker image ${{env.asof}} ${{env.buildContainers}}, in conditional
        if: ${{env.buildImage == 'true' }}
        run: |
          (cd ops; \
              git branch | cat; \
              cat ${builder} | yq '.services | keys'; \
              make build dockerCompose='docker compose' DOMAIN= f=${builder} services="${buildContainers}" ; \
          )
      - name: images ${{env.asof}},    in conditional
        if: ${{env.buildImage == 'true' }}
        run: |
          docker images | grep itaru2622/bluesky

      - name: push docker image to remote registry ${{env.asof}}, in conditional
        if: ${{env.buildImage == 'true' }}
        run: |
          # login to docker registry
          echo ${gh_secret} | docker login ${REGISTRY} -u ${user} --password-stdin

          # pick image and assign tag for upload then push it.
          for i in `docker images | grep itaru2622/bluesky | awk -v c=':' '{print $1 c $2}' ` ; do
              echo $i;
              docker tag $i ${REGISTRY}/$i;
              docker push   ${REGISTRY}/$i;
          done
          #docker push  ${REGISTRY}/${user}/apline:latest
          docker logout ${REGISTRY}

      - name: commit and push ./log-commits to remote branch
        if: steps.unfollowedCommits.outputs.git > 0
        env:
#         https://qiita.com/SNQ-2001/items/b024bb8664e869bc4fab
          GITHUB_TOKEN: ${{secrets.GH_TOKEN_WORKFLOW }}
        run: |
          # configure name and email as github-actions[bot]
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          git add ./log-commits
          git commit -m "update: log-commits by ${asof} github-actions" -m "in detail, refer ${myResultPage}"

          # cf. https://github.com/actions/checkout
          echo "git push to ${branch}"
          git push origin ${branch}
